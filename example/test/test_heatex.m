clc; clear; close all
%%% This is an exmple given in FreeFEM Documentation: Release 4.6
%   Subsection 2.4 - Heat Exchanger (heatex.edp)

%% Mesh
id = 1;
switch id
    case 1  % mesh generated by freefem++        
        [node,elem] = getMeshFreeFEM('meshdata_heatex.msh');
        %load meshdata_heatex
    case 2  % mesh generated by pdetool        
        load gdata_heatex.mat
        [p,e,t] = initmesh(g,'hmax',1);
        for i = 1:2
            [p,e,t] = refinemesh(g,p,e,t);
        end
        node = p'; elem = t(1:3,:)';
end

% bdStr
C0 = 'x.^2 + y.^2 > 3.8^2'; % 1
bdStr = C0; 
% mesh info
Th = FeMesh2d(node,elem,bdStr);

%% PDE data
kappa = @(p) 1 + 2*(p(:,1)<-1).*(p(:,1)>-2).*(p(:,2)<3).*(p(:,2)>-3); % p = [x,y]

%% Bilinear form
Vh = 'P1'; quadOrder = 5;
Coef = kappa;  Test = 'v.grad';  Trial = 'u.grad';
kk = assem2d(Th,Coef,Test,Trial,Vh,quadOrder); 

%% Linear form
ff = zeros(size(kk,1),1);

%% Dirichlet boundary conditions
on = [1,2];
gBc1 = @(p) 20+0*p(:,1);
gBc2 = @(p) 100+0*p(:,1);
uh = apply2d(on,Th,kk,ff,Vh,gBc1,gBc2);

figure, showsolution(node,elem,uh(1:Th.N));
% view(2); colorbar;
title('Numerical solution of varFEM');

%% FreeFEM solution
if id==1
    uff = solFreeFEM('sol_heatex.txt');
    figure, showsolution(node,elem,uff(1:Th.N));
    title('Numerical solution of FreeFEM++');
end

%% Interpolate to a 2D cartesian grid
tic;
figure, 
x = [-5:0.05:-1, -1:0.005:1, 1:0.05:5]; 
y = [-5:0.05:-4, -4:0.005:3, 3:0.05:5];
varcontourf(x,y,node,elem,uh(1:Th.N),20); 

fprintf('Time for contour plot is: %.4f s \n', toc);